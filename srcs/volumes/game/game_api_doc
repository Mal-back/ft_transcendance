Important : when a KeyValue Error is receive from your websocket, the game will ignore it and not send anything, please follow the correct JSON formats described bellow to have the best experience possible with our game.

I - Pong:

A - Local game:

1 - Join a room :

	Establish a websocket connection to "ws://application_host/api/game/ws/room_id" where :
		- application_host is the combination host-port of the application (ex: localhost:8080).
		- room_id is the id given by the matchmaking (not working yet, you can put any ID you want to create a room).
	
	This will create a room in Django Channel to communicate with the game engine. You can not join a local game room if there is already a client in it.

2 - Initialise the game :

	Send via the websocket in JSON format : 
	
		{type: "init_game"}
		
	This will :
		- Create the game thread via the local_engine worker
		- The thread is ready to start or send configuration to the client

	You can not initialise the game more than one time.
		

3 - Get game configuration : 

	Send via the websocket in JSON format :

		{type: "get_config"}

	This will send you configuration to draw the base game :

		{"type : "config",
		"board_len": value,
		"board_height": value,
		"ball_size": value,
		"pad_len": value,
		"pad_height": value,
		"player_1": [x, y],
		"player_2": [x, y],
		"ball": [x, y]}

		Where :
			- board_len is the x maximum value
			- board_height is the y maximum value
			- ball size is the ball radius
			- pad_len is the pad size on x axe
			- pad_height is the pad size on y axe
			- player's coordinates are the top-left coordinates of the pad
			- ball's coordinates are the center of the ball
			- To access to initial x or y coordinate of an element, use [0] or [1] (ex: to get initial x of player 2, use player_2[0]).

		Info : coordinates [0, 0] is at top-left of the board.
		Warning : If you get configuration while game runing, you can not access to current player's and ball's positions with the configuration. It will always send you initial coordinates.

4 - Start the game :

	Send via the websocket in JSON format :

		{type: "start_game"}
		
	This will start the game and send you each frame periodically :

		{"type" : "frame",
			"ball" : {"position" : [x, y]},
			"player_1" : {"username" : value, "position" : [x, y], "score" : value},
			"player_2" : {"username" : value, "position" : [x, y], "score" : value},
		}

	Player's coordinates are the top-left coordinates of the pad.
	Ball's coordinates are the center of the ball.
	
5 - Move a player :

	Send via the websocket in JSON format the following message :

		{"type" : "move",
		"player" : value,
		"direction" value,
		}

	Where : 
		- player is either "player_1" or "player_2"
		- move is "UP" or "DOWN"

	This will save the player's movement for the next frame. Player's movement is reset after each frame.
	Sending a movement while game is not started or paused does nothing

6 - Pause the game :

	Send via the websocket in JSON format the following message :

		{"type" : "pause",
		"action" : value,
		}

	Where :
		- action is either "stop" or "start"

	Stopping a stopped game or starting a started game does nothing.
	You must unpause the game if you send a surrend while the game is paused to end the game.
	If you send "start" via the "pause" type after "init_game" and before "start_game", it will start the game the same way "start_game" does.

7 - End state of the game :

	When the game finished (a player obtains the maximum score or a player surrenders), the game sends you a last message :

		{"type" : "end_state",
			"winner" : value,
			"score_1" : value,
			"score_2" : value,
		}

	Where : 
		- score_1 is the first players's score at the end of the game
		- score_2 is the second players's score at the end of the game
		- winner is either "player_1" or "player_2"
